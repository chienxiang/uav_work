# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from practice/position.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class position(genpy.Message):
  _md5sum = "efbb7ed7259937659d1ca1eefb10b7e9"
  _type = "practice/position"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header


float64 uav0_px
float64 uav0_py
float64 uav0_pz

float64 uav1_px
float64 uav1_py
float64 uav1_pz

float64 uav2_px
float64 uav2_py
float64 uav2_pz

float64 g0_px
float64 g0_py
float64 g0_pz

float64 g1_px
float64 g1_py
float64 g1_pz

float64 g2_px
float64 g2_py
float64 g2_pz

float64 time

float64 uav0_pid_vx
float64 uav0_pid_vy
float64 uav0_pid_vz

float64 uav0_aS
float64 uav0_a_vx
float64 uav0_a_vy
float64 uav0_a_vz

float64 uav0_cS
float64 uav0_c_vx
float64 uav0_c_vy
float64 uav0_c_vz

float64 uav1_pid_vx
float64 uav1_pid_vy
float64 uav1_pid_vz

float64 uav1_aS
float64 uav1_a_vx
float64 uav1_a_vy
float64 uav1_a_vz

float64 uav1_cS
float64 uav1_c_vx
float64 uav1_c_vy
float64 uav1_c_vz

float64 uav2_pid_vx
float64 uav2_pid_vy
float64 uav2_pid_vz

float64 uav2_aS
float64 uav2_a_vx
float64 uav2_a_vy
float64 uav2_a_vz

float64 uav2_cS
float64 uav2_c_vx
float64 uav2_c_vy
float64 uav2_c_vz



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','uav0_px','uav0_py','uav0_pz','uav1_px','uav1_py','uav1_pz','uav2_px','uav2_py','uav2_pz','g0_px','g0_py','g0_pz','g1_px','g1_py','g1_pz','g2_px','g2_py','g2_pz','time','uav0_pid_vx','uav0_pid_vy','uav0_pid_vz','uav0_aS','uav0_a_vx','uav0_a_vy','uav0_a_vz','uav0_cS','uav0_c_vx','uav0_c_vy','uav0_c_vz','uav1_pid_vx','uav1_pid_vy','uav1_pid_vz','uav1_aS','uav1_a_vx','uav1_a_vy','uav1_a_vz','uav1_cS','uav1_c_vx','uav1_c_vy','uav1_c_vz','uav2_pid_vx','uav2_pid_vy','uav2_pid_vz','uav2_aS','uav2_a_vx','uav2_a_vy','uav2_a_vz','uav2_cS','uav2_c_vx','uav2_c_vy','uav2_c_vz']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,uav0_px,uav0_py,uav0_pz,uav1_px,uav1_py,uav1_pz,uav2_px,uav2_py,uav2_pz,g0_px,g0_py,g0_pz,g1_px,g1_py,g1_pz,g2_px,g2_py,g2_pz,time,uav0_pid_vx,uav0_pid_vy,uav0_pid_vz,uav0_aS,uav0_a_vx,uav0_a_vy,uav0_a_vz,uav0_cS,uav0_c_vx,uav0_c_vy,uav0_c_vz,uav1_pid_vx,uav1_pid_vy,uav1_pid_vz,uav1_aS,uav1_a_vx,uav1_a_vy,uav1_a_vz,uav1_cS,uav1_c_vx,uav1_c_vy,uav1_c_vz,uav2_pid_vx,uav2_pid_vy,uav2_pid_vz,uav2_aS,uav2_a_vx,uav2_a_vy,uav2_a_vz,uav2_cS,uav2_c_vx,uav2_c_vy,uav2_c_vz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(position, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uav0_px is None:
        self.uav0_px = 0.
      if self.uav0_py is None:
        self.uav0_py = 0.
      if self.uav0_pz is None:
        self.uav0_pz = 0.
      if self.uav1_px is None:
        self.uav1_px = 0.
      if self.uav1_py is None:
        self.uav1_py = 0.
      if self.uav1_pz is None:
        self.uav1_pz = 0.
      if self.uav2_px is None:
        self.uav2_px = 0.
      if self.uav2_py is None:
        self.uav2_py = 0.
      if self.uav2_pz is None:
        self.uav2_pz = 0.
      if self.g0_px is None:
        self.g0_px = 0.
      if self.g0_py is None:
        self.g0_py = 0.
      if self.g0_pz is None:
        self.g0_pz = 0.
      if self.g1_px is None:
        self.g1_px = 0.
      if self.g1_py is None:
        self.g1_py = 0.
      if self.g1_pz is None:
        self.g1_pz = 0.
      if self.g2_px is None:
        self.g2_px = 0.
      if self.g2_py is None:
        self.g2_py = 0.
      if self.g2_pz is None:
        self.g2_pz = 0.
      if self.time is None:
        self.time = 0.
      if self.uav0_pid_vx is None:
        self.uav0_pid_vx = 0.
      if self.uav0_pid_vy is None:
        self.uav0_pid_vy = 0.
      if self.uav0_pid_vz is None:
        self.uav0_pid_vz = 0.
      if self.uav0_aS is None:
        self.uav0_aS = 0.
      if self.uav0_a_vx is None:
        self.uav0_a_vx = 0.
      if self.uav0_a_vy is None:
        self.uav0_a_vy = 0.
      if self.uav0_a_vz is None:
        self.uav0_a_vz = 0.
      if self.uav0_cS is None:
        self.uav0_cS = 0.
      if self.uav0_c_vx is None:
        self.uav0_c_vx = 0.
      if self.uav0_c_vy is None:
        self.uav0_c_vy = 0.
      if self.uav0_c_vz is None:
        self.uav0_c_vz = 0.
      if self.uav1_pid_vx is None:
        self.uav1_pid_vx = 0.
      if self.uav1_pid_vy is None:
        self.uav1_pid_vy = 0.
      if self.uav1_pid_vz is None:
        self.uav1_pid_vz = 0.
      if self.uav1_aS is None:
        self.uav1_aS = 0.
      if self.uav1_a_vx is None:
        self.uav1_a_vx = 0.
      if self.uav1_a_vy is None:
        self.uav1_a_vy = 0.
      if self.uav1_a_vz is None:
        self.uav1_a_vz = 0.
      if self.uav1_cS is None:
        self.uav1_cS = 0.
      if self.uav1_c_vx is None:
        self.uav1_c_vx = 0.
      if self.uav1_c_vy is None:
        self.uav1_c_vy = 0.
      if self.uav1_c_vz is None:
        self.uav1_c_vz = 0.
      if self.uav2_pid_vx is None:
        self.uav2_pid_vx = 0.
      if self.uav2_pid_vy is None:
        self.uav2_pid_vy = 0.
      if self.uav2_pid_vz is None:
        self.uav2_pid_vz = 0.
      if self.uav2_aS is None:
        self.uav2_aS = 0.
      if self.uav2_a_vx is None:
        self.uav2_a_vx = 0.
      if self.uav2_a_vy is None:
        self.uav2_a_vy = 0.
      if self.uav2_a_vz is None:
        self.uav2_a_vz = 0.
      if self.uav2_cS is None:
        self.uav2_cS = 0.
      if self.uav2_c_vx is None:
        self.uav2_c_vx = 0.
      if self.uav2_c_vy is None:
        self.uav2_c_vy = 0.
      if self.uav2_c_vz is None:
        self.uav2_c_vz = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.uav0_px = 0.
      self.uav0_py = 0.
      self.uav0_pz = 0.
      self.uav1_px = 0.
      self.uav1_py = 0.
      self.uav1_pz = 0.
      self.uav2_px = 0.
      self.uav2_py = 0.
      self.uav2_pz = 0.
      self.g0_px = 0.
      self.g0_py = 0.
      self.g0_pz = 0.
      self.g1_px = 0.
      self.g1_py = 0.
      self.g1_pz = 0.
      self.g2_px = 0.
      self.g2_py = 0.
      self.g2_pz = 0.
      self.time = 0.
      self.uav0_pid_vx = 0.
      self.uav0_pid_vy = 0.
      self.uav0_pid_vz = 0.
      self.uav0_aS = 0.
      self.uav0_a_vx = 0.
      self.uav0_a_vy = 0.
      self.uav0_a_vz = 0.
      self.uav0_cS = 0.
      self.uav0_c_vx = 0.
      self.uav0_c_vy = 0.
      self.uav0_c_vz = 0.
      self.uav1_pid_vx = 0.
      self.uav1_pid_vy = 0.
      self.uav1_pid_vz = 0.
      self.uav1_aS = 0.
      self.uav1_a_vx = 0.
      self.uav1_a_vy = 0.
      self.uav1_a_vz = 0.
      self.uav1_cS = 0.
      self.uav1_c_vx = 0.
      self.uav1_c_vy = 0.
      self.uav1_c_vz = 0.
      self.uav2_pid_vx = 0.
      self.uav2_pid_vy = 0.
      self.uav2_pid_vz = 0.
      self.uav2_aS = 0.
      self.uav2_a_vx = 0.
      self.uav2_a_vy = 0.
      self.uav2_a_vz = 0.
      self.uav2_cS = 0.
      self.uav2_c_vx = 0.
      self.uav2_c_vy = 0.
      self.uav2_c_vz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_52d().pack(_x.uav0_px, _x.uav0_py, _x.uav0_pz, _x.uav1_px, _x.uav1_py, _x.uav1_pz, _x.uav2_px, _x.uav2_py, _x.uav2_pz, _x.g0_px, _x.g0_py, _x.g0_pz, _x.g1_px, _x.g1_py, _x.g1_pz, _x.g2_px, _x.g2_py, _x.g2_pz, _x.time, _x.uav0_pid_vx, _x.uav0_pid_vy, _x.uav0_pid_vz, _x.uav0_aS, _x.uav0_a_vx, _x.uav0_a_vy, _x.uav0_a_vz, _x.uav0_cS, _x.uav0_c_vx, _x.uav0_c_vy, _x.uav0_c_vz, _x.uav1_pid_vx, _x.uav1_pid_vy, _x.uav1_pid_vz, _x.uav1_aS, _x.uav1_a_vx, _x.uav1_a_vy, _x.uav1_a_vz, _x.uav1_cS, _x.uav1_c_vx, _x.uav1_c_vy, _x.uav1_c_vz, _x.uav2_pid_vx, _x.uav2_pid_vy, _x.uav2_pid_vz, _x.uav2_aS, _x.uav2_a_vx, _x.uav2_a_vy, _x.uav2_a_vz, _x.uav2_cS, _x.uav2_c_vx, _x.uav2_c_vy, _x.uav2_c_vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 416
      (_x.uav0_px, _x.uav0_py, _x.uav0_pz, _x.uav1_px, _x.uav1_py, _x.uav1_pz, _x.uav2_px, _x.uav2_py, _x.uav2_pz, _x.g0_px, _x.g0_py, _x.g0_pz, _x.g1_px, _x.g1_py, _x.g1_pz, _x.g2_px, _x.g2_py, _x.g2_pz, _x.time, _x.uav0_pid_vx, _x.uav0_pid_vy, _x.uav0_pid_vz, _x.uav0_aS, _x.uav0_a_vx, _x.uav0_a_vy, _x.uav0_a_vz, _x.uav0_cS, _x.uav0_c_vx, _x.uav0_c_vy, _x.uav0_c_vz, _x.uav1_pid_vx, _x.uav1_pid_vy, _x.uav1_pid_vz, _x.uav1_aS, _x.uav1_a_vx, _x.uav1_a_vy, _x.uav1_a_vz, _x.uav1_cS, _x.uav1_c_vx, _x.uav1_c_vy, _x.uav1_c_vz, _x.uav2_pid_vx, _x.uav2_pid_vy, _x.uav2_pid_vz, _x.uav2_aS, _x.uav2_a_vx, _x.uav2_a_vy, _x.uav2_a_vz, _x.uav2_cS, _x.uav2_c_vx, _x.uav2_c_vy, _x.uav2_c_vz,) = _get_struct_52d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_52d().pack(_x.uav0_px, _x.uav0_py, _x.uav0_pz, _x.uav1_px, _x.uav1_py, _x.uav1_pz, _x.uav2_px, _x.uav2_py, _x.uav2_pz, _x.g0_px, _x.g0_py, _x.g0_pz, _x.g1_px, _x.g1_py, _x.g1_pz, _x.g2_px, _x.g2_py, _x.g2_pz, _x.time, _x.uav0_pid_vx, _x.uav0_pid_vy, _x.uav0_pid_vz, _x.uav0_aS, _x.uav0_a_vx, _x.uav0_a_vy, _x.uav0_a_vz, _x.uav0_cS, _x.uav0_c_vx, _x.uav0_c_vy, _x.uav0_c_vz, _x.uav1_pid_vx, _x.uav1_pid_vy, _x.uav1_pid_vz, _x.uav1_aS, _x.uav1_a_vx, _x.uav1_a_vy, _x.uav1_a_vz, _x.uav1_cS, _x.uav1_c_vx, _x.uav1_c_vy, _x.uav1_c_vz, _x.uav2_pid_vx, _x.uav2_pid_vy, _x.uav2_pid_vz, _x.uav2_aS, _x.uav2_a_vx, _x.uav2_a_vy, _x.uav2_a_vz, _x.uav2_cS, _x.uav2_c_vx, _x.uav2_c_vy, _x.uav2_c_vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 416
      (_x.uav0_px, _x.uav0_py, _x.uav0_pz, _x.uav1_px, _x.uav1_py, _x.uav1_pz, _x.uav2_px, _x.uav2_py, _x.uav2_pz, _x.g0_px, _x.g0_py, _x.g0_pz, _x.g1_px, _x.g1_py, _x.g1_pz, _x.g2_px, _x.g2_py, _x.g2_pz, _x.time, _x.uav0_pid_vx, _x.uav0_pid_vy, _x.uav0_pid_vz, _x.uav0_aS, _x.uav0_a_vx, _x.uav0_a_vy, _x.uav0_a_vz, _x.uav0_cS, _x.uav0_c_vx, _x.uav0_c_vy, _x.uav0_c_vz, _x.uav1_pid_vx, _x.uav1_pid_vy, _x.uav1_pid_vz, _x.uav1_aS, _x.uav1_a_vx, _x.uav1_a_vy, _x.uav1_a_vz, _x.uav1_cS, _x.uav1_c_vx, _x.uav1_c_vy, _x.uav1_c_vz, _x.uav2_pid_vx, _x.uav2_pid_vy, _x.uav2_pid_vz, _x.uav2_aS, _x.uav2_a_vx, _x.uav2_a_vy, _x.uav2_a_vz, _x.uav2_cS, _x.uav2_c_vx, _x.uav2_c_vy, _x.uav2_c_vz,) = _get_struct_52d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_52d = None
def _get_struct_52d():
    global _struct_52d
    if _struct_52d is None:
        _struct_52d = struct.Struct("<52d")
    return _struct_52d
