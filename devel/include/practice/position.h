// Generated by gencpp from file practice/position.msg
// DO NOT EDIT!


#ifndef PRACTICE_MESSAGE_POSITION_H
#define PRACTICE_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace practice
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : header()
    , uav0_px(0.0)
    , uav0_py(0.0)
    , uav0_pz(0.0)
    , uav1_px(0.0)
    , uav1_py(0.0)
    , uav1_pz(0.0)
    , uav2_px(0.0)
    , uav2_py(0.0)
    , uav2_pz(0.0)
    , g0_px(0.0)
    , g0_py(0.0)
    , g0_pz(0.0)
    , g1_px(0.0)
    , g1_py(0.0)
    , g1_pz(0.0)
    , g2_px(0.0)
    , g2_py(0.0)
    , g2_pz(0.0)
    , time(0.0)
    , uav0_pid_vx(0.0)
    , uav0_pid_vy(0.0)
    , uav0_pid_vz(0.0)
    , uav0_aS(0.0)
    , uav0_a_vx(0.0)
    , uav0_a_vy(0.0)
    , uav0_a_vz(0.0)
    , uav0_cS(0.0)
    , uav0_c_vx(0.0)
    , uav0_c_vy(0.0)
    , uav0_c_vz(0.0)
    , uav1_pid_vx(0.0)
    , uav1_pid_vy(0.0)
    , uav1_pid_vz(0.0)
    , uav1_aS(0.0)
    , uav1_a_vx(0.0)
    , uav1_a_vy(0.0)
    , uav1_a_vz(0.0)
    , uav1_cS(0.0)
    , uav1_c_vx(0.0)
    , uav1_c_vy(0.0)
    , uav1_c_vz(0.0)
    , uav2_pid_vx(0.0)
    , uav2_pid_vy(0.0)
    , uav2_pid_vz(0.0)
    , uav2_aS(0.0)
    , uav2_a_vx(0.0)
    , uav2_a_vy(0.0)
    , uav2_a_vz(0.0)
    , uav2_cS(0.0)
    , uav2_c_vx(0.0)
    , uav2_c_vy(0.0)
    , uav2_c_vz(0.0)  {
    }
  position_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav0_px(0.0)
    , uav0_py(0.0)
    , uav0_pz(0.0)
    , uav1_px(0.0)
    , uav1_py(0.0)
    , uav1_pz(0.0)
    , uav2_px(0.0)
    , uav2_py(0.0)
    , uav2_pz(0.0)
    , g0_px(0.0)
    , g0_py(0.0)
    , g0_pz(0.0)
    , g1_px(0.0)
    , g1_py(0.0)
    , g1_pz(0.0)
    , g2_px(0.0)
    , g2_py(0.0)
    , g2_pz(0.0)
    , time(0.0)
    , uav0_pid_vx(0.0)
    , uav0_pid_vy(0.0)
    , uav0_pid_vz(0.0)
    , uav0_aS(0.0)
    , uav0_a_vx(0.0)
    , uav0_a_vy(0.0)
    , uav0_a_vz(0.0)
    , uav0_cS(0.0)
    , uav0_c_vx(0.0)
    , uav0_c_vy(0.0)
    , uav0_c_vz(0.0)
    , uav1_pid_vx(0.0)
    , uav1_pid_vy(0.0)
    , uav1_pid_vz(0.0)
    , uav1_aS(0.0)
    , uav1_a_vx(0.0)
    , uav1_a_vy(0.0)
    , uav1_a_vz(0.0)
    , uav1_cS(0.0)
    , uav1_c_vx(0.0)
    , uav1_c_vy(0.0)
    , uav1_c_vz(0.0)
    , uav2_pid_vx(0.0)
    , uav2_pid_vy(0.0)
    , uav2_pid_vz(0.0)
    , uav2_aS(0.0)
    , uav2_a_vx(0.0)
    , uav2_a_vy(0.0)
    , uav2_a_vz(0.0)
    , uav2_cS(0.0)
    , uav2_c_vx(0.0)
    , uav2_c_vy(0.0)
    , uav2_c_vz(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _uav0_px_type;
  _uav0_px_type uav0_px;

   typedef double _uav0_py_type;
  _uav0_py_type uav0_py;

   typedef double _uav0_pz_type;
  _uav0_pz_type uav0_pz;

   typedef double _uav1_px_type;
  _uav1_px_type uav1_px;

   typedef double _uav1_py_type;
  _uav1_py_type uav1_py;

   typedef double _uav1_pz_type;
  _uav1_pz_type uav1_pz;

   typedef double _uav2_px_type;
  _uav2_px_type uav2_px;

   typedef double _uav2_py_type;
  _uav2_py_type uav2_py;

   typedef double _uav2_pz_type;
  _uav2_pz_type uav2_pz;

   typedef double _g0_px_type;
  _g0_px_type g0_px;

   typedef double _g0_py_type;
  _g0_py_type g0_py;

   typedef double _g0_pz_type;
  _g0_pz_type g0_pz;

   typedef double _g1_px_type;
  _g1_px_type g1_px;

   typedef double _g1_py_type;
  _g1_py_type g1_py;

   typedef double _g1_pz_type;
  _g1_pz_type g1_pz;

   typedef double _g2_px_type;
  _g2_px_type g2_px;

   typedef double _g2_py_type;
  _g2_py_type g2_py;

   typedef double _g2_pz_type;
  _g2_pz_type g2_pz;

   typedef double _time_type;
  _time_type time;

   typedef double _uav0_pid_vx_type;
  _uav0_pid_vx_type uav0_pid_vx;

   typedef double _uav0_pid_vy_type;
  _uav0_pid_vy_type uav0_pid_vy;

   typedef double _uav0_pid_vz_type;
  _uav0_pid_vz_type uav0_pid_vz;

   typedef double _uav0_aS_type;
  _uav0_aS_type uav0_aS;

   typedef double _uav0_a_vx_type;
  _uav0_a_vx_type uav0_a_vx;

   typedef double _uav0_a_vy_type;
  _uav0_a_vy_type uav0_a_vy;

   typedef double _uav0_a_vz_type;
  _uav0_a_vz_type uav0_a_vz;

   typedef double _uav0_cS_type;
  _uav0_cS_type uav0_cS;

   typedef double _uav0_c_vx_type;
  _uav0_c_vx_type uav0_c_vx;

   typedef double _uav0_c_vy_type;
  _uav0_c_vy_type uav0_c_vy;

   typedef double _uav0_c_vz_type;
  _uav0_c_vz_type uav0_c_vz;

   typedef double _uav1_pid_vx_type;
  _uav1_pid_vx_type uav1_pid_vx;

   typedef double _uav1_pid_vy_type;
  _uav1_pid_vy_type uav1_pid_vy;

   typedef double _uav1_pid_vz_type;
  _uav1_pid_vz_type uav1_pid_vz;

   typedef double _uav1_aS_type;
  _uav1_aS_type uav1_aS;

   typedef double _uav1_a_vx_type;
  _uav1_a_vx_type uav1_a_vx;

   typedef double _uav1_a_vy_type;
  _uav1_a_vy_type uav1_a_vy;

   typedef double _uav1_a_vz_type;
  _uav1_a_vz_type uav1_a_vz;

   typedef double _uav1_cS_type;
  _uav1_cS_type uav1_cS;

   typedef double _uav1_c_vx_type;
  _uav1_c_vx_type uav1_c_vx;

   typedef double _uav1_c_vy_type;
  _uav1_c_vy_type uav1_c_vy;

   typedef double _uav1_c_vz_type;
  _uav1_c_vz_type uav1_c_vz;

   typedef double _uav2_pid_vx_type;
  _uav2_pid_vx_type uav2_pid_vx;

   typedef double _uav2_pid_vy_type;
  _uav2_pid_vy_type uav2_pid_vy;

   typedef double _uav2_pid_vz_type;
  _uav2_pid_vz_type uav2_pid_vz;

   typedef double _uav2_aS_type;
  _uav2_aS_type uav2_aS;

   typedef double _uav2_a_vx_type;
  _uav2_a_vx_type uav2_a_vx;

   typedef double _uav2_a_vy_type;
  _uav2_a_vy_type uav2_a_vy;

   typedef double _uav2_a_vz_type;
  _uav2_a_vz_type uav2_a_vz;

   typedef double _uav2_cS_type;
  _uav2_cS_type uav2_cS;

   typedef double _uav2_c_vx_type;
  _uav2_c_vx_type uav2_c_vx;

   typedef double _uav2_c_vy_type;
  _uav2_c_vy_type uav2_c_vy;

   typedef double _uav2_c_vz_type;
  _uav2_c_vz_type uav2_c_vz;





  typedef boost::shared_ptr< ::practice::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::practice::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::practice::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::practice::position > positionPtr;
typedef boost::shared_ptr< ::practice::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::practice::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::practice::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::practice::position_<ContainerAllocator1> & lhs, const ::practice::position_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav0_px == rhs.uav0_px &&
    lhs.uav0_py == rhs.uav0_py &&
    lhs.uav0_pz == rhs.uav0_pz &&
    lhs.uav1_px == rhs.uav1_px &&
    lhs.uav1_py == rhs.uav1_py &&
    lhs.uav1_pz == rhs.uav1_pz &&
    lhs.uav2_px == rhs.uav2_px &&
    lhs.uav2_py == rhs.uav2_py &&
    lhs.uav2_pz == rhs.uav2_pz &&
    lhs.g0_px == rhs.g0_px &&
    lhs.g0_py == rhs.g0_py &&
    lhs.g0_pz == rhs.g0_pz &&
    lhs.g1_px == rhs.g1_px &&
    lhs.g1_py == rhs.g1_py &&
    lhs.g1_pz == rhs.g1_pz &&
    lhs.g2_px == rhs.g2_px &&
    lhs.g2_py == rhs.g2_py &&
    lhs.g2_pz == rhs.g2_pz &&
    lhs.time == rhs.time &&
    lhs.uav0_pid_vx == rhs.uav0_pid_vx &&
    lhs.uav0_pid_vy == rhs.uav0_pid_vy &&
    lhs.uav0_pid_vz == rhs.uav0_pid_vz &&
    lhs.uav0_aS == rhs.uav0_aS &&
    lhs.uav0_a_vx == rhs.uav0_a_vx &&
    lhs.uav0_a_vy == rhs.uav0_a_vy &&
    lhs.uav0_a_vz == rhs.uav0_a_vz &&
    lhs.uav0_cS == rhs.uav0_cS &&
    lhs.uav0_c_vx == rhs.uav0_c_vx &&
    lhs.uav0_c_vy == rhs.uav0_c_vy &&
    lhs.uav0_c_vz == rhs.uav0_c_vz &&
    lhs.uav1_pid_vx == rhs.uav1_pid_vx &&
    lhs.uav1_pid_vy == rhs.uav1_pid_vy &&
    lhs.uav1_pid_vz == rhs.uav1_pid_vz &&
    lhs.uav1_aS == rhs.uav1_aS &&
    lhs.uav1_a_vx == rhs.uav1_a_vx &&
    lhs.uav1_a_vy == rhs.uav1_a_vy &&
    lhs.uav1_a_vz == rhs.uav1_a_vz &&
    lhs.uav1_cS == rhs.uav1_cS &&
    lhs.uav1_c_vx == rhs.uav1_c_vx &&
    lhs.uav1_c_vy == rhs.uav1_c_vy &&
    lhs.uav1_c_vz == rhs.uav1_c_vz &&
    lhs.uav2_pid_vx == rhs.uav2_pid_vx &&
    lhs.uav2_pid_vy == rhs.uav2_pid_vy &&
    lhs.uav2_pid_vz == rhs.uav2_pid_vz &&
    lhs.uav2_aS == rhs.uav2_aS &&
    lhs.uav2_a_vx == rhs.uav2_a_vx &&
    lhs.uav2_a_vy == rhs.uav2_a_vy &&
    lhs.uav2_a_vz == rhs.uav2_a_vz &&
    lhs.uav2_cS == rhs.uav2_cS &&
    lhs.uav2_c_vx == rhs.uav2_c_vx &&
    lhs.uav2_c_vy == rhs.uav2_c_vy &&
    lhs.uav2_c_vz == rhs.uav2_c_vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::practice::position_<ContainerAllocator1> & lhs, const ::practice::position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace practice

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::practice::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practice::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practice::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practice::position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::position_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::practice::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efbb7ed7259937659d1ca1eefb10b7e9";
  }

  static const char* value(const ::practice::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefbb7ed725993765ULL;
  static const uint64_t static_value2 = 0x9d1ca1eefb10b7e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::practice::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "practice/position";
  }

  static const char* value(const ::practice::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::practice::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"\n"
"float64 uav0_px\n"
"float64 uav0_py\n"
"float64 uav0_pz\n"
"\n"
"float64 uav1_px\n"
"float64 uav1_py\n"
"float64 uav1_pz\n"
"\n"
"float64 uav2_px\n"
"float64 uav2_py\n"
"float64 uav2_pz\n"
"\n"
"float64 g0_px\n"
"float64 g0_py\n"
"float64 g0_pz\n"
"\n"
"float64 g1_px\n"
"float64 g1_py\n"
"float64 g1_pz\n"
"\n"
"float64 g2_px\n"
"float64 g2_py\n"
"float64 g2_pz\n"
"\n"
"float64 time\n"
"\n"
"float64 uav0_pid_vx\n"
"float64 uav0_pid_vy\n"
"float64 uav0_pid_vz\n"
"\n"
"float64 uav0_aS\n"
"float64 uav0_a_vx\n"
"float64 uav0_a_vy\n"
"float64 uav0_a_vz\n"
"\n"
"float64 uav0_cS\n"
"float64 uav0_c_vx\n"
"float64 uav0_c_vy\n"
"float64 uav0_c_vz\n"
"\n"
"float64 uav1_pid_vx\n"
"float64 uav1_pid_vy\n"
"float64 uav1_pid_vz\n"
"\n"
"float64 uav1_aS\n"
"float64 uav1_a_vx\n"
"float64 uav1_a_vy\n"
"float64 uav1_a_vz\n"
"\n"
"float64 uav1_cS\n"
"float64 uav1_c_vx\n"
"float64 uav1_c_vy\n"
"float64 uav1_c_vz\n"
"\n"
"float64 uav2_pid_vx\n"
"float64 uav2_pid_vy\n"
"float64 uav2_pid_vz\n"
"\n"
"float64 uav2_aS\n"
"float64 uav2_a_vx\n"
"float64 uav2_a_vy\n"
"float64 uav2_a_vz\n"
"\n"
"float64 uav2_cS\n"
"float64 uav2_c_vx\n"
"float64 uav2_c_vy\n"
"float64 uav2_c_vz\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::practice::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::practice::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav0_px);
      stream.next(m.uav0_py);
      stream.next(m.uav0_pz);
      stream.next(m.uav1_px);
      stream.next(m.uav1_py);
      stream.next(m.uav1_pz);
      stream.next(m.uav2_px);
      stream.next(m.uav2_py);
      stream.next(m.uav2_pz);
      stream.next(m.g0_px);
      stream.next(m.g0_py);
      stream.next(m.g0_pz);
      stream.next(m.g1_px);
      stream.next(m.g1_py);
      stream.next(m.g1_pz);
      stream.next(m.g2_px);
      stream.next(m.g2_py);
      stream.next(m.g2_pz);
      stream.next(m.time);
      stream.next(m.uav0_pid_vx);
      stream.next(m.uav0_pid_vy);
      stream.next(m.uav0_pid_vz);
      stream.next(m.uav0_aS);
      stream.next(m.uav0_a_vx);
      stream.next(m.uav0_a_vy);
      stream.next(m.uav0_a_vz);
      stream.next(m.uav0_cS);
      stream.next(m.uav0_c_vx);
      stream.next(m.uav0_c_vy);
      stream.next(m.uav0_c_vz);
      stream.next(m.uav1_pid_vx);
      stream.next(m.uav1_pid_vy);
      stream.next(m.uav1_pid_vz);
      stream.next(m.uav1_aS);
      stream.next(m.uav1_a_vx);
      stream.next(m.uav1_a_vy);
      stream.next(m.uav1_a_vz);
      stream.next(m.uav1_cS);
      stream.next(m.uav1_c_vx);
      stream.next(m.uav1_c_vy);
      stream.next(m.uav1_c_vz);
      stream.next(m.uav2_pid_vx);
      stream.next(m.uav2_pid_vy);
      stream.next(m.uav2_pid_vz);
      stream.next(m.uav2_aS);
      stream.next(m.uav2_a_vx);
      stream.next(m.uav2_a_vy);
      stream.next(m.uav2_a_vz);
      stream.next(m.uav2_cS);
      stream.next(m.uav2_c_vx);
      stream.next(m.uav2_c_vy);
      stream.next(m.uav2_c_vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::practice::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::practice::position_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uav0_px: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_px);
    s << indent << "uav0_py: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_py);
    s << indent << "uav0_pz: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_pz);
    s << indent << "uav1_px: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_px);
    s << indent << "uav1_py: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_py);
    s << indent << "uav1_pz: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_pz);
    s << indent << "uav2_px: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_px);
    s << indent << "uav2_py: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_py);
    s << indent << "uav2_pz: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_pz);
    s << indent << "g0_px: ";
    Printer<double>::stream(s, indent + "  ", v.g0_px);
    s << indent << "g0_py: ";
    Printer<double>::stream(s, indent + "  ", v.g0_py);
    s << indent << "g0_pz: ";
    Printer<double>::stream(s, indent + "  ", v.g0_pz);
    s << indent << "g1_px: ";
    Printer<double>::stream(s, indent + "  ", v.g1_px);
    s << indent << "g1_py: ";
    Printer<double>::stream(s, indent + "  ", v.g1_py);
    s << indent << "g1_pz: ";
    Printer<double>::stream(s, indent + "  ", v.g1_pz);
    s << indent << "g2_px: ";
    Printer<double>::stream(s, indent + "  ", v.g2_px);
    s << indent << "g2_py: ";
    Printer<double>::stream(s, indent + "  ", v.g2_py);
    s << indent << "g2_pz: ";
    Printer<double>::stream(s, indent + "  ", v.g2_pz);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "uav0_pid_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_pid_vx);
    s << indent << "uav0_pid_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_pid_vy);
    s << indent << "uav0_pid_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_pid_vz);
    s << indent << "uav0_aS: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_aS);
    s << indent << "uav0_a_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_a_vx);
    s << indent << "uav0_a_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_a_vy);
    s << indent << "uav0_a_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_a_vz);
    s << indent << "uav0_cS: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_cS);
    s << indent << "uav0_c_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_c_vx);
    s << indent << "uav0_c_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_c_vy);
    s << indent << "uav0_c_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav0_c_vz);
    s << indent << "uav1_pid_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_pid_vx);
    s << indent << "uav1_pid_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_pid_vy);
    s << indent << "uav1_pid_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_pid_vz);
    s << indent << "uav1_aS: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_aS);
    s << indent << "uav1_a_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_a_vx);
    s << indent << "uav1_a_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_a_vy);
    s << indent << "uav1_a_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_a_vz);
    s << indent << "uav1_cS: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_cS);
    s << indent << "uav1_c_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_c_vx);
    s << indent << "uav1_c_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_c_vy);
    s << indent << "uav1_c_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav1_c_vz);
    s << indent << "uav2_pid_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_pid_vx);
    s << indent << "uav2_pid_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_pid_vy);
    s << indent << "uav2_pid_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_pid_vz);
    s << indent << "uav2_aS: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_aS);
    s << indent << "uav2_a_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_a_vx);
    s << indent << "uav2_a_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_a_vy);
    s << indent << "uav2_a_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_a_vz);
    s << indent << "uav2_cS: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_cS);
    s << indent << "uav2_c_vx: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_c_vx);
    s << indent << "uav2_c_vy: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_c_vy);
    s << indent << "uav2_c_vz: ";
    Printer<double>::stream(s, indent + "  ", v.uav2_c_vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACTICE_MESSAGE_POSITION_H
